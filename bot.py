import os
import re
import csv
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from sentence_transformers import SentenceTransformer, util
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ NLP
model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (50%)
MIN_SIMILARITY = 0.40

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
try:
    vacancies = pd.read_csv('vacancies.csv')
except FileNotFoundError:
    vacancies = pd.DataFrame({
        'title': ['–°–≤–∞—Ä—â–∏–∫', '–í–æ–¥–∏—Ç–µ–ª—å', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å', '–≠–ª–µ–∫—Ç—Ä–∏–∫'],
        'description': [
            '–°–≤–∞—Ä–∫–∞ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –æ–ø—ã—Ç –æ—Ç 1 –≥–æ–¥–∞',
            '–ö–∞—Ç. –°, –ø–µ—Ä–µ–≤–æ–∑–∫–∞ –≥—Ä—É–∑–æ–≤, –∑–Ω–∞–Ω–∏–µ –ü–î–î',
            '–û–±—â–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, –æ–ø—ã—Ç –æ—Ç 2 –ª–µ—Ç',
            '–ú–æ–Ω—Ç–∞–∂ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ç–µ–π, –æ–ø—ã—Ç –æ—Ç 3 –ª–µ—Ç'
        ],
        'salary_–†–æ—Å—Å–∏—è': ['70-90 —Ç—ã—Å.', '65-85 —Ç—ã—Å.', '60-80 —Ç—ã—Å.', '75-95 —Ç—ã—Å.'],
        'salary_–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω': ['60-80 —Ç—ã—Å.', '55-75 —Ç—ã—Å.', '50-70 —Ç—ã—Å.', '65-85 —Ç—ã—Å.'],
        'salary_–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω': ['65-85 —Ç—ã—Å.', '60-80 —Ç—ã—Å.', '55-75 —Ç—ã—Å.', '70-90 —Ç—ã—Å.']
    })

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_keyboards():
    age_keyboard = ReplyKeyboardMarkup(
        [['18-25'], ['26-35'], ['36-45'], ['46-55']],
        one_time_keyboard=True,
        resize_keyboard=True
    )
    country_keyboard = ReplyKeyboardMarkup(
        [['–†–æ—Å—Å–∏—è'], ['–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω'], ['–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'], ['–î—Ä—É–≥–æ–µ']],
        one_time_keyboard=True,
        resize_keyboard=True
    )
    return age_keyboard, country_keyboard

def save_candidate(data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ CSV-—Ñ–∞–π–ª"""
    fieldnames = [
        'timestamp', 
        'user_id',
        'name', 
        'phone', 
        'age', 
        'country', 
        'selected_vacancy', 
        'experience',
        'contact_method'
    ]
    
    try:
        with open('candidates.csv', 'a', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            
            if f.tell() == 0:
                writer.writeheader()
                
            writer.writerow(data)
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç: {data['name']}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    context.user_data.clear()
    age_keyboard, _ = create_keyboards()
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n"
        "–Ø HR-–±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ.\n"
        "–°–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç–æ–≤:\n"
        "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        reply_markup=age_keyboard
    )

async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    age = update.message.text
    if any(c.isalpha() for c in age):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ '18-25'")
        return
    
    try:
        age_num = int(age.split('-')[0])
        if age_num < 18 or age_num > 55:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –æ—Ç 18 –¥–æ 55 –ª–µ—Ç")
            return
        
        context.user_data['age'] = age
        _, country_keyboard = create_keyboards()
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:",
            reply_markup=country_keyboard
        )
    except (ValueError, IndexError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '18-25'")

async def handle_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞"""
    country = update.message.text
    context.user_data['country'] = country
    
    if country == "–î—Ä—É–≥–æ–µ":
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ–º")
        return
    
    await update.message.reply_text(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –∏ –Ω–∞–≤—ã–∫–∞—Ö:\n"
        "–ü—Ä–∏–º–µ—Ä: '–†–∞–±–æ—Ç–∞–ª —Å–≤–∞—Ä—â–∏–∫–æ–º 3 –≥–æ–¥–∞ –Ω–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö, "
        "–≤–ª–∞–¥–µ—é —Ä—É—á–Ω–æ–π –¥—É–≥–æ–≤–æ–π —Å–≤–∞—Ä–∫–æ–π, —á–∏—Ç–∞—é —á–µ—Ä—Ç–µ–∂–∏, —Ä–∞–±–æ—Ç–∞–ª —Å–æ —Å—Ç–∞–ª—å—é –∏ –∞–ª—é–º–∏–Ω–∏–µ–º'"
    )

def match_vacancies(text: str, country: str) -> pd.DataFrame:
    """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ 40%"""
    if vacancies.empty or text.strip() == "":
        return pd.DataFrame()
    
    try:
        candidate_embedding = model.encode(text, convert_to_tensor=True)
        vacancy_embeddings = model.encode(vacancies['description'].tolist(), convert_to_tensor=True)
        
        cos_scores = util.pytorch_cos_sim(candidate_embedding, vacancy_embeddings)[0]
        
        results = []
        for score, idx in zip(cos_scores, range(len(cos_scores))):
            if score >= MIN_SIMILARITY:
                vacancy = vacancies.iloc[idx]
                salary_column = f'salary_{country}' if f'salary_{country}' in vacancies.columns else 'salary_–†–æ—Å—Å–∏—è'
                results.append({
                    '–í–∞–∫–∞–Ω—Å–∏—è': vacancy['title'],
                    '–ó–∞—Ä–ø–ª–∞—Ç–∞': vacancy[salary_column],
                    '–û–ø–∏—Å–∞–Ω–∏–µ': vacancy['description'],
                    '–°—Ö–æ–¥—Å—Ç–≤–æ': f"{score.item():.1%}"
                })
        
        return pd.DataFrame(results).sort_values('–°—Ö–æ–¥—Å—Ç–≤–æ', ascending=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        return pd.DataFrame()

async def handle_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø—ã—Ç–∞"""
    if 'country' not in context.user_data:
        await start(update, context)
        return
    
    experience = update.message.text
    context.user_data['experience'] = experience
    country = context.user_data['country']
    
    try:
        matched = match_vacancies(experience, country)
        
        if matched.empty:
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–∏–Ω–∏–º—É–º 40%).\n"
                "–°–æ–≤–µ—Ç: —É–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –∏ –Ω–∞–≤—ã–∫–∞—Ö."
            )
            return
        
        context.user_data['last_matches'] = matched.to_dict('records')
        context.user_data['selected_vacancy'] = matched.iloc[0]['–í–∞–∫–∞–Ω—Å–∏—è']
        
        response = "üèÜ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ—Ç 40%):\n\n"
        for i, vacancy in enumerate(context.user_data['last_matches'], 1):
            response += (
                f"{i}. <b>{vacancy['–í–∞–∫–∞–Ω—Å–∏—è']}</b>\n"
                f"   üí∞ <i>–ó–∞—Ä–ø–ª–∞—Ç–∞:</i> {vacancy['–ó–∞—Ä–ø–ª–∞—Ç–∞']}\n"
                f"   üìä <i>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</i> {vacancy['–°—Ö–æ–¥—Å—Ç–≤–æ']}\n"
                f"   üìå <i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {vacancy['–û–ø–∏—Å–∞–Ω–∏–µ'][:150]}...\n\n"
            )
        
        await update.message.reply_text(response, parse_mode='HTML')
        await update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è HR? (–ù–∞–ø–∏—à–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç')",
            reply_markup=ReplyKeyboardMarkup([['–î–∞'], ['–ù–µ—Ç']], one_time_keyboard=True, resize_keyboard=True)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_contact_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    answer = update.message.text.lower()
    if answer == '–¥–∞':
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789",
            reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], one_time_keyboard=True, resize_keyboard=True)
        )
        context.user_data['awaiting_phone'] = True
    else:
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )

async def handle_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not context.user_data.get('awaiting_phone', False):
        return
    
    phone = update.message.text
    if not re.match(r'^\+7\d{10}$', phone):
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    candidate_data = {
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'user_id': update.effective_user.id,
        'name': update.effective_user.full_name,
        'phone': phone,
        'age': context.user_data.get('age', 'N/A'),
        'country': context.user_data.get('country', 'N/A'),
        'selected_vacancy': context.user_data.get('selected_vacancy', 'N/A'),
        'experience': context.user_data.get('experience', 'N/A'),
        'contact_method': 'Telegram'
    }
    
    save_candidate(candidate_data)
    
    response = (
        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"–ò–º—è: {candidate_data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {candidate_data['selected_vacancy']}\n\n"
        "HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\n"
        "–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
    
    await update.message.reply_text(response)
    context.user_data.clear()

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    if not TOKEN:
        logging.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists('candidates.csv'):
        with open('candidates.csv', 'w', newline='', encoding='utf-8') as f:
            pass
    
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex(r'^(18-25|26-35|36-45|46-55)$'), handle_age))
    application.add_handler(MessageHandler(filters.Regex(r'^(–†–æ—Å—Å–∏—è|–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω|–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω|–î—Ä—É–≥–æ–µ)$'), handle_country))
    application.add_handler(MessageHandler(filters.Regex(r'^(–î–∞|–ù–µ—Ç)$'), handle_contact_request))
    application.add_handler(MessageHandler(filters.Regex(r'^\+7\d{10}$'), handle_phone_number))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_experience))
    
    logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()